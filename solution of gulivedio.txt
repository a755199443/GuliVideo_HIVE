数据结构:
视频表
字段		备注		详细描述
video id	视频唯一id	11位字符串
uploader	视频上传者	上传视频的用户名String
age			视频年龄	视频在平台上的整数天
category	视频类别	上传视频指定的视频分类
length		视频长度	整形数字标识的视频长度
views		观看次数	视频被浏览的次数
rate		视频评分	满分5分
Ratings		流量		视频的流量，整型数字
conments	评论数		一个视频的整数评论数
related ids	相关视频id	相关视频的id，最多20个

用户表
字段		备注			字段类型
uploader	上传者用户名	string
videos		上传视频数		int
friends		朋友数量		int

数据准备:
linux运行spark程序
bin/spark-submit --master yarn --class com.hive.ETLUtils /root/hiveETL.jar file:///root/in/video/2008/0222 /data/input/video/2008/0222/ 

hive初始优化
//对于小数据,启动本地化模式可以有效缩短任务时间
set hive.exec.mode.local.auto=true;
//设置local mr的最大输入数据量，当输入数据量小于这个值时采用local  mr的方式，默认为134217728，即128M
set hive.exec.mode.local.auto.inputbytes.max=500000000;
//设置local mr的最大输入文件个数，当输入文件个数小于这个值时采用local mr的方式，默认为4
set hive.exec.mode.local.auto.input.files.max=10;

hive建表
普通textfile表,导入hdfs数据
create table gulivideo_ori(
    videoId string, 
    uploader string, 
    age int, 
    category array<string>, 
    length int, 
    views int, 
    rate float, 
    ratings int, 
    comments int,
    relatedId array<string>)
row format delimited 
fields terminated by "\t"
collection items terminated by "&"
stored as textfile;

create table gulivideo_user_ori(
    uploader string,
    videos int,
    friends int)
row format delimited 
fields terminated by "\t" 
stored as textfile;

load data inpath "/data/input2/video/2008/0222/part-*"  into table gulivideo_ori;
load data local inpath "/root/in/user/2008/0903" into table gulivideo_user_ori;

建orc表,从普通表中导入数据
create table gulivideo_orc(
    videoId string, 
    uploader string, 
    age int, 
    category array<string>, 
    length int, 
    views int, 
    rate float, 
    ratings int, 
    comments int,
    relatedId array<string>)
row format delimited fields terminated by "\t" 
collection items terminated by "&" 
stored as orc;

create table gulivideo_user_orc(
    uploader string,
    videos int,
    friends int)
row format delimited 
fields terminated by "\t" 
stored as orc;

insert into table gulivideo_orc select * from gulivideo_ori;
insert into table gulivideo_user_orc select * from gulivideo_user_ori;

最终video表数据量为743569,user表数据量为2139109.

处理需求:
1 统计视频观看数Top10
2 统计视频类别热度Top10
3 统计视频观看数Top20所属类别
4 统计视频观看数Top50所关联视频的所属类别Rank
5 统计每个类别中的视频热度Top10
6 统计每个类别中视频流量Top10
7 统计上传视频最多的用户Top10以及他们上传的视频
8 统计每个类别视频观看数Top10

1 统计视频观看数Top10
直接按view排序,取前十
select
videoId,
views
from
gulivideo_orc
order by
views desc
limit 10;

2 统计视频类别热度Top10
问题转换,视频热度即视频数量,求出包含视频数量最多的top10类别
将类别字段的数组炸开
select 
videoid,
views,
category_name
from
gulivideo_orc
lateral view explode(category) temp as category_name;t1
按照列别分组,统计每个类别的视频数量,并降序排名
select
category_name,
count(*) sum,
rank() over(order by count(*) desc) `rank`
from
(select 
videoid,
views,
category_name
from
gulivideo_orc
lateral view explode(category) temp as category_name)t1
group by 
category_name;t2
最后根据rank函数的结果取top10
select
category_name,
sum,
`rank`
from
(select
category_name,
count(*) sum,
rank() over(order by count(*) desc) `rank`
from
(select 
videoid,
views,
category_name
from
gulivideo_orc
lateral view explode(category) temp as category_name)t1
group by 
category_name)t2
where `rank`<11;

3 统计出视频观看数最高的20 个视频的所属类别以及类别包含Top20视频的个数 
获得观看数量top20的视频
select
videoid,
views,
category
from
gulivideo_orc
order by 
views desc
limit 20;t1
获得top20视频的类别,通过分组求各类别top20视频数量
select 
category_name,
count(*)
from
(select
videoid,
views,
category
from
gulivideo_orc
order by 
views desc
limit 20)t1
lateral view explode(category) temp as category_name
group by 
category_name;

4  统计视频观看数Top50 所关联视频的所属类别Rank
获得视频观看数top50的视频
select
videoid,
category,
relatedId,
views
from 
gulivideo_orc
order by
views desc
limit 50;t1
获取top50视频的相关视频
select 
relatedId_id
from
(select
videoid,
category,
relatedId,
views
from 
gulivideo_orc
order by
views desc
limit 50)t1
lateral view explode(relatedId) temp as relatedId_id;t2
获得相关视频的类型
select
videoid,
category
from
gulivideo_orc
join
(select 
relatedId_id
from
(select
videoid,
category,
relatedId,
views
from 
gulivideo_orc
order by
views desc
limit 50)t1
lateral view explode(relatedId) temp as relatedId_id)t2
on
videoid=relatedId_id;t3
获得类型排名
select
category_name,
count(*) sum
from
(select
videoid,
category
from
gulivideo_orc
join
(select 
relatedId_id
from
(select
videoid,
category,
relatedId,
views
from 
gulivideo_orc
order by
views desc
limit 50)t1
lateral view explode(relatedId) temp as relatedId_id)t2
on
videoid=relatedId_id)t3
lateral view explode(category)temp as category_name
group by
category_name
order by
sum desc;

5 统计每个类别中的视频热度Top10，以Music为例
获得视频,播放量和单独类型,并按类型排名
select
videoid,
views,
category_name,
rank() over(partition by category_name order by views desc) `rank`
from 
gulivideo_orc
lateral view explode(category)temp as category_name;t1
取各类型排名的前10
select
videoid,
views,
category_name,
`rank`
from
(select
videoid,
views,
category_name,
rank() over(partition by category_name order by views desc) `rank`
from 
gulivideo_orc
lateral view explode(category)temp as category_name)t1
where 
`rank`<11;

6 统计每个类别中视频流量Top10，以Music为例
将5中的views改为ratings即可

7 统计上传视频最多的用户Top10以及他们上传的观看次数在前20的视频 
获取上传视频最多的用户top10
select 
uploader,
videos
from
gulivideo_user_orc
order by
videos desc
limit 10;t1
获得这十位uploader的视频以及播放量
select
videoid,
views,
t.uploader
from
gulivideo_orc t
join
(select 
uploader,
videos
from
gulivideo_user_orc
order by
videos desc
limit 10)t1
on
t.uploader=t1.uploader
order by
views desc
limit 20;

8 统计每个类别视频观看数Top10
select 
    t1.* 
from (
    select 
        videoId,
        categoryId,
        views,
        row_number() over(partition by categoryId order by views desc) rank from gulivideo_category) t1 
where 
    rank <= 10;
